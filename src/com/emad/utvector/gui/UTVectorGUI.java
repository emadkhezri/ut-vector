
package com.emad.utvector.gui;

import com.emad.utvector.core.Constants;
import com.emad.utvector.core.GeneralTypes;
import com.emad.utvector.core.GeneralTypes.ClassifierType;
import static com.emad.utvector.core.GeneralTypes.ClassifierType.KNN;
import com.emad.utvector.core.UTVector;
import ij.process.ColorProcessor;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import static java.lang.System.exit;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.ujmp.core.collections.ArrayIndexList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author tnp
 */
public class UTVectorGUI extends javax.swing.JFrame
{

    /**
     * Creates new form UTVectorGUI
     */
    public UTVectorGUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        vectorizationButton = new javax.swing.JButton();
        utVectorLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        aboutUsButton = new javax.swing.JButton();
        medianFilterCheckBox = new javax.swing.JCheckBox();
        inputImageLabel = new javax.swing.JLabel();
        inputImageTextField = new javax.swing.JTextField();
        inputImageButton = new javax.swing.JButton();
        outputImageLabel = new javax.swing.JLabel();
        outputImageTextField = new javax.swing.JTextField();
        outputImageButton = new javax.swing.JButton();
        medianFrameSizeLabel = new javax.swing.JLabel();
        medianFrameSizeSlider = new javax.swing.JSlider();
        thresholdingCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        thresholdValueTextField = new javax.swing.JTextField();
        trainedDataSetLabel = new javax.swing.JLabel();
        trainedDataSetTextField = new javax.swing.JTextField();
        trainedDataSetButton = new javax.swing.JButton();
        classifierTypeLabel = new javax.swing.JLabel();
        classifierTypeComboBox = new javax.swing.JComboBox();
        knnNumberLabel = new javax.swing.JLabel();
        knnNumberTextField = new javax.swing.JTextField();
        simplifyTypeLabel = new javax.swing.JLabel();
        SimplifyTypeComboBox = new javax.swing.JComboBox();
        simplifyToleranceLabel = new javax.swing.JLabel();
        simplifyToleranceTextField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        imageViewPanel = new javax.swing.JPanel();
        picLabel = new javax.swing.JLabel();
        vectorizationProgressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UTVector");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);

        vectorizationButton.setText("برداری‌سازی");
        vectorizationButton.setActionCommand("vectorizeButton");
        vectorizationButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                vectorizationButtonActionPerformed(evt);
            }
        });

        utVectorLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        utVectorLabel.setForeground(new java.awt.Color(0, 153, 255));
        utVectorLabel.setText("نرم‌افزار برداری‌سازی دانشگاه تهران");
        utVectorLabel.setName(""); // NOI18N

        aboutUsButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\tnp\\Documents\\NetBeansProjects\\vectorization\\resources\\utLogo.png")); // NOI18N

        medianFilterCheckBox.setSelected(true);
        medianFilterCheckBox.setText("فیــلتر میانی");
        medianFilterCheckBox.setActionCommand("medianFilterCheckBox");
        medianFilterCheckBox.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                medianFilterCheckBoxStateChanged(evt);
            }
        });

        inputImageLabel.setText("تصویر ورودی");

        inputImageTextField.setText("sample.bmp");

        inputImageButton.setText("...");
        inputImageButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                inputImageButtonActionPerformed(evt);
            }
        });

        outputImageLabel.setText("تصویر خروجی");

        outputImageTextField.setText("sample.svg");

        outputImageButton.setText("...");
        outputImageButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                outputImageButtonActionPerformed(evt);
            }
        });

        medianFrameSizeLabel.setText("اندازه قاب فیلتر میانی");

        medianFrameSizeSlider.setMajorTickSpacing(2);
        medianFrameSizeSlider.setMaximum(9);
        medianFrameSizeSlider.setMinimum(3);
        medianFrameSizeSlider.setPaintLabels(true);
        medianFrameSizeSlider.setPaintTicks(true);
        medianFrameSizeSlider.setSnapToTicks(true);
        medianFrameSizeSlider.setValue(3);

        thresholdingCheckBox.setSelected(true);
        thresholdingCheckBox.setText("آستانه گیری");
        thresholdingCheckBox.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                thresholdingCheckBoxStateChanged(evt);
            }
        });

        jLabel1.setText("مقدارآســتانــه");

        thresholdValueTextField.setText("120");

        trainedDataSetLabel.setText("دیتاست یادگیری");

        trainedDataSetTextField.setText("dataset.csv");

        trainedDataSetButton.setText("...");
        trainedDataSetButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                trainedDataSetButtonActionPerformed(evt);
            }
        });

        classifierTypeLabel.setText("روش یادگیری");

        classifierTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SVM", "KNN" }));
        classifierTypeComboBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                classifierTypeComboBoxItemStateChanged(evt);
            }
        });

        knnNumberLabel.setText("تعداد همسایگی");

        knnNumberTextField.setText("3");
        knnNumberTextField.setEnabled(false);

        simplifyTypeLabel.setText("روش تـخـمین");

        SimplifyTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Douglas_Peucker", "Radial_Distance" }));
        SimplifyTypeComboBox.addItemListener(new java.awt.event.ItemListener()
        {
            public void itemStateChanged(java.awt.event.ItemEvent evt)
            {
                SimplifyTypeComboBoxItemStateChanged(evt);
            }
        });

        simplifyToleranceLabel.setText("تحمل تخــمـیـن");

        simplifyToleranceTextField.setText("0.5");

        jButton1.setText("خروج");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        imageViewPanel.setBackground(new java.awt.Color(204, 204, 204));
        imageViewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout imageViewPanelLayout = new javax.swing.GroupLayout(imageViewPanel);
        imageViewPanel.setLayout(imageViewPanelLayout);
        imageViewPanelLayout.setHorizontalGroup(
            imageViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(picLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
        );
        imageViewPanelLayout.setVerticalGroup(
            imageViewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(picLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(vectorizationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(imageViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(vectorizationProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(inputImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(inputImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(outputImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(outputImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(21, 21, 21)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(outputImageLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(inputImageLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(trainedDataSetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(trainedDataSetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(trainedDataSetLabel))
                                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(medianFrameSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(medianFrameSizeLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(medianFilterCheckBox))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(thresholdValueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                                                    .addComponent(knnNumberTextField)
                                                    .addComponent(simplifyToleranceTextField))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(knnNumberLabel)
                                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(simplifyToleranceLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                                .addGap(46, 46, 46)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addComponent(classifierTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(classifierTypeLabel)
                                                            .addGap(5, 5, 5))
                                                        .addComponent(thresholdingCheckBox, javax.swing.GroupLayout.Alignment.TRAILING))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(SimplifyTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(simplifyTypeLabel)))
                                                .addGap(0, 0, Short.MAX_VALUE))))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(aboutUsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(utVectorLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(utVectorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aboutUsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputImageLabel)
                            .addComponent(inputImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(inputImageButton))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outputImageLabel)
                            .addComponent(outputImageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(outputImageButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(trainedDataSetLabel)
                            .addComponent(trainedDataSetTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trainedDataSetButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(medianFilterCheckBox)
                                .addComponent(medianFrameSizeLabel))
                            .addComponent(medianFrameSizeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(thresholdValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(thresholdingCheckBox))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classifierTypeLabel)
                            .addComponent(classifierTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(knnNumberLabel)
                            .addComponent(knnNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(simplifyToleranceLabel)
                            .addComponent(SimplifyTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(simplifyTypeLabel)
                            .addComponent(simplifyToleranceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(imageViewPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(vectorizationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(vectorizationProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void medianFilterCheckBoxStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_medianFilterCheckBoxStateChanged
    {//GEN-HEADEREND:event_medianFilterCheckBoxStateChanged
        // TODO add your handling code here:
        medianFrameSizeSlider.setEnabled(medianFilterCheckBox.isSelected());
    }//GEN-LAST:event_medianFilterCheckBoxStateChanged

    private void thresholdingCheckBoxStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_thresholdingCheckBoxStateChanged
    {//GEN-HEADEREND:event_thresholdingCheckBoxStateChanged
        // TODO add your handling code here:
        thresholdValueTextField.setEnabled(thresholdingCheckBox.isSelected());
    }//GEN-LAST:event_thresholdingCheckBoxStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        // TODO add your handling code here:
        exit(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void classifierTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_classifierTypeComboBoxItemStateChanged
    {//GEN-HEADEREND:event_classifierTypeComboBoxItemStateChanged
        // TODO add your handling code here:
        Constants.CLASSIFIER_TYPE = GeneralTypes.ClassifierType.valueOf(classifierTypeComboBox.
                getSelectedItem().toString());
        if (Constants.CLASSIFIER_TYPE.equals(GeneralTypes.ClassifierType.KNN))
        {
            knnNumberTextField.setEnabled(true);
        }
        else
        {
            knnNumberTextField.setEnabled(false);
        }
    }//GEN-LAST:event_classifierTypeComboBoxItemStateChanged

    private void SimplifyTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_SimplifyTypeComboBoxItemStateChanged
    {//GEN-HEADEREND:event_SimplifyTypeComboBoxItemStateChanged
        // TODO add your handling code here:
        Constants.SIMPLIFY_ALGORITHM = GeneralTypes.SimplifyAlgorithm.valueOf(SimplifyTypeComboBox.
                getSelectedItem().toString());
    }//GEN-LAST:event_SimplifyTypeComboBoxItemStateChanged

    private void inputImageButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_inputImageButtonActionPerformed
    {//GEN-HEADEREND:event_inputImageButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser inputImageChooser = new JFileChooser(".");
        FileFilter filter = new FileNameExtensionFilter("Image files", new String[]
        {
            "jpg", "jpeg", "bmp", "png"
        });
        inputImageChooser.setFileFilter(filter);
        inputImageChooser.setAcceptAllFileFilterUsed(false);
        if (inputImageChooser.showDialog(null, "Open") == JFileChooser.APPROVE_OPTION)
        {
            inputImageTextField.setText(inputImageChooser.getSelectedFile().getAbsolutePath());
        }
        File imageFile = new File(inputImageChooser.getSelectedFile().getAbsolutePath());
        if (imageFile.exists() && !imageFile.isDirectory())
        {
            try
            {
                BufferedImage bufferedImage = ImageIO.read(imageFile);
                Image image = new ColorProcessor(bufferedImage).resize(imageViewPanel.getWidth(),
                        imageViewPanel.getHeight()).createImage();
                picLabel.setIcon(new ImageIcon(image));
            }
            catch (IOException ex)
            {
                Logger.getLogger(UTVectorGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_inputImageButtonActionPerformed

    private void outputImageButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_outputImageButtonActionPerformed
    {//GEN-HEADEREND:event_outputImageButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser outputImageChooser = new JFileChooser(".");
        FileFilter filter = new FileNameExtensionFilter("SVG file", new String[]
        {
            "svg"
        });
        outputImageChooser.setFileFilter(filter);
        outputImageChooser.setAcceptAllFileFilterUsed(false);
        if (outputImageChooser.showDialog(null, "Save") == JFileChooser.APPROVE_OPTION)
        {
            String saveFilePath = outputImageChooser.getSelectedFile().getAbsolutePath();
            StringBuilder savePathBuilder = new StringBuilder(saveFilePath);
            if (!saveFilePath.endsWith(".svg"))
            {
                savePathBuilder.append(".svg");
            }
            outputImageTextField.setText(savePathBuilder.toString());
        }
    }//GEN-LAST:event_outputImageButtonActionPerformed

    private void trainedDataSetButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_trainedDataSetButtonActionPerformed
    {//GEN-HEADEREND:event_trainedDataSetButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser datasetChooser = new JFileChooser(".");
        FileFilter filter = new FileNameExtensionFilter("Dataset files", new String[]
        {
            "csv", "data"
        });
        datasetChooser.setFileFilter(filter);
        datasetChooser.setAcceptAllFileFilterUsed(false);
        if (datasetChooser.showDialog(null, "Open") == JFileChooser.APPROVE_OPTION)
        {
            trainedDataSetTextField.setText(datasetChooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_trainedDataSetButtonActionPerformed

    private void vectorizationButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_vectorizationButtonActionPerformed
    {//GEN-HEADEREND:event_vectorizationButtonActionPerformed
        // TODO add your handling code here:
        setState(ApplicationState.BUSY);
        ArrayList<String> parameters = new ArrayIndexList<String>();
        parameters.add("INPUT_FILE_NAME=" + inputImageTextField.getText().trim());
        parameters.add("OUTPUT_FILE_NAME=" + outputImageTextField.getText().trim());
        parameters.add("NEED_MEDIAN_FILTER=" + medianFilterCheckBox.isSelected());
        parameters.add("NEED_GRAY_SCALE_THRESHOLD=" + thresholdingCheckBox.isSelected());
        parameters.add("MEDIAN_FILTER_FRAME_SIZE=" + medianFrameSizeSlider.getValue());
        parameters.add("GRAY_SCALE_THRESHOLD=" + thresholdValueTextField.getText().trim());
        parameters.add("CLASSIFIER_TYPE=" + Constants.CLASSIFIER_TYPE);
        parameters.add("DATASET_FILE_NAME=" + trainedDataSetTextField.getText().trim());
        parameters.add("KNN_NUMBER=" + knnNumberTextField.getText().trim());
        parameters.add("SIMPLIFY_ALGORITHM=" + Constants.SIMPLIFY_ALGORITHM);
        parameters.add("SIMPLIFY_TOLERANCE=" + simplifyToleranceTextField.getText().trim());

        String paramArgs[] = new String[parameters.size()];
        paramArgs = parameters.toArray(paramArgs);
        final String finalParams[] = paramArgs;
        Thread vectorizeThread;
        vectorizeThread
                = new Thread(new Runnable()
                        {

                            @Override
                            public void run()
                            {
                                try
                                {
                                    UTVector utVector = new UTVector(finalParams);
                                    vectorizationProgressBar.setValue(25);
                                    File inputFile = new File(Constants.INPUT_FILE_NAME);
                                    BufferedImage image = ImageIO.read(inputFile);
                                    image = utVector.preProcess(image);
                                    vectorizationProgressBar.setValue(50);
                                    LinkedHashMap<String, ArrayList<Point>> segmentMap = utVector.
                                    process(image);
                                    vectorizationProgressBar.setValue(75);
                                    utVector.postProcess(image, segmentMap);
                                    vectorizationProgressBar.setValue(100);
                                    //ToDo:replace with messageBox
                                    SwingUtilities.invokeLater(new Runnable()
                                            {

                                                @Override
                                                public void run()
                                                {

                                                    JOptionPane.showMessageDialog(null,
                                                            "بردار سازی با موفقیت انجام شد");
                                                    setState(ApplicationState.IDLE);
                                                    vectorizationProgressBar.setValue(0);
                                                }

                                    });
                                }
                                catch (final Exception ex)
                                {
                                    //ToDo: replace with messageBox
                                    SwingUtilities.invokeLater(new Runnable()
                                            {

                                                @Override
                                                public void run()
                                                {
                                                    JOptionPane.showMessageDialog(null,
                                                            "بردار سازی با خطا مواجه شد" + "\n"
                                                            + ex.toString());
                                                    setState(ApplicationState.IDLE);
                                                    vectorizationProgressBar.setValue(0);
                                                }

                                    });
                                }
                            }

                });
        vectorizeThread.start();
        try
        {
            Process p = Runtime.getRuntime().exec("java -jar batik-squiggle.jar");
            InputStream e = p.getErrorStream();
            InputStream i = p.getInputStream();
            OutputStream o = p.getOutputStream();
            System.out.println("");
        }
        catch (IOException ex)
        {
            System.out.println("error");
            Logger.getLogger(UTVectorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_vectorizationButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.
                    getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(UTVectorGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(UTVectorGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(UTVectorGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(UTVectorGUI.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                try
                {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }
                catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex)
                {
                    Logger.getLogger(UTVectorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                UTVectorGUI utVectorGUI = new UTVectorGUI();
                try
                {
                    utVectorGUI.setIconImage(ImageIO.read(new File("icon/utLogo.png")));
                }
                catch (IOException ex)
                {
                    Logger.getLogger(UTVectorGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                utVectorGUI.setVisible(true);
            }

        });
    }

    private void setState(ApplicationState applicationState)
    {
        boolean enablity = true;
        if (applicationState.equals(applicationState.BUSY))
        {
            enablity = false;
        }
        else
        {
            enablity = true;
        }
        inputImageTextField.setEnabled(enablity);
        inputImageButton.setEnabled(enablity);
        outputImageTextField.setEnabled(enablity);
        outputImageButton.setEnabled(enablity);
        trainedDataSetTextField.setEnabled(enablity);
        trainedDataSetButton.setEnabled(enablity);
        medianFilterCheckBox.setEnabled(enablity);
        if (medianFilterCheckBox.isSelected())
        {
            medianFrameSizeSlider.setEnabled(enablity);
        }
        thresholdingCheckBox.setEnabled(enablity);
        if (thresholdingCheckBox.isSelected())
        {
            thresholdValueTextField.setEnabled(enablity);
        }
        classifierTypeComboBox.setEnabled(enablity);
        if (ClassifierType.valueOf(classifierTypeComboBox.getSelectedItem().toString()).equals(KNN))
        {
            knnNumberTextField.setEnabled(enablity);
        }
        SimplifyTypeComboBox.setEnabled(enablity);
        simplifyToleranceTextField.setEnabled(enablity);
        vectorizationButton.setEnabled(enablity);
    }

    private enum ApplicationState
    {

        IDLE,
        BUSY
    };
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox SimplifyTypeComboBox;
    private javax.swing.JButton aboutUsButton;
    private javax.swing.JComboBox classifierTypeComboBox;
    private javax.swing.JLabel classifierTypeLabel;
    private javax.swing.JPanel imageViewPanel;
    private javax.swing.JButton inputImageButton;
    private javax.swing.JLabel inputImageLabel;
    private javax.swing.JTextField inputImageTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel knnNumberLabel;
    private javax.swing.JTextField knnNumberTextField;
    private javax.swing.JCheckBox medianFilterCheckBox;
    private javax.swing.JLabel medianFrameSizeLabel;
    private javax.swing.JSlider medianFrameSizeSlider;
    private javax.swing.JButton outputImageButton;
    private javax.swing.JLabel outputImageLabel;
    private javax.swing.JTextField outputImageTextField;
    private javax.swing.JLabel picLabel;
    private javax.swing.JLabel simplifyToleranceLabel;
    private javax.swing.JTextField simplifyToleranceTextField;
    private javax.swing.JLabel simplifyTypeLabel;
    private javax.swing.JTextField thresholdValueTextField;
    private javax.swing.JCheckBox thresholdingCheckBox;
    private javax.swing.JButton trainedDataSetButton;
    private javax.swing.JLabel trainedDataSetLabel;
    private javax.swing.JTextField trainedDataSetTextField;
    private javax.swing.JLabel utVectorLabel;
    private javax.swing.JButton vectorizationButton;
    private javax.swing.JProgressBar vectorizationProgressBar;
    // End of variables declaration//GEN-END:variables
}
